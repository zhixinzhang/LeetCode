package DataStructure.Tree;

import google.TreeNode;


// https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
// perfect tree

public class _104_MaximumDepthofBinaryTree_Recursion {

    public Node connect(Node root) {
        if (root == null) {
            return root;
        }

        Queue<Node> q = new LinkedList<>();
        q.add(root);

        while (!q.isEmpty()){
            int size = q.size();

            for (int i = 0; i < size; i ++){
                Node node = q.poll();

                if (i < size - 1) {
                    node.next = q.peek();
                }

                if (node.left != null) {
                    q.add(node.left);
                }

                if (node.right != null) {
                    q.add(node.right);
                }
            }
        }

        return root;
    }


    public Node connect_Dfs(Node root) {
        if (root == null)
            return root;
        dfs(root.left, root.right);
        return root;
    }

    private void dfs(Node nodeLeft, Node nodeRight){
        if (nodeLeft == null || nodeRight == null)
            return;

        nodeLeft.next = nodeRight;
        dfs(nodeLeft.left, nodeLeft.right);
        dfs(nodeLeft.right, nodeRight.left);
        dfs(nodeRight.left, nodeRight.right);

    }
}