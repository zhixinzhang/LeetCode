 /**
 * Given an sorted array of numbers ARRAY and two numbers K and TARGET.
 * Return the number of sub-arrays of size K and average greater than the TARGET.
 *                   
 * Input: array = [2,2,2,2,5,5,5,8], k = 3, target = 4
 * Output: 2


 [2, 5]  / 2 = 7 / 2 ~ 3.5
 [2, 5, 5, 1] 13 / 3 ~ 4     invalid
 [5, 5, 5] 15 / 3 ~ 5 > 4   valid
 [5, 5, 8]  18 / 3 ~ 6 > 4 valid   


 [1, 1, 1, 1, 1, 2,2,2,2, 2, 2, 2, 2,  ,2 ,2,2,2, 5,5,5,8]  k  leng of sub array   k - 1 < target      

index = 1000
[]



 Sliding windoes algo / scan from left to right

 O(N) time N is number of integer in Array
 O(L) L is the max sliding wiondow

O(1) Space
 **/

// [2,2,2,2,5,5,5,8]
 public int findAllSubarray(int[] arr, int k, int target){
    if (arr == null || arr.lengh < k || target < 0){
      return 0;
    }

    LinkedList<Integer> sldingwiond = new ArrayList<>();
    int currSum = 0;
    int curLen = 0;
    int res = 0;
    int len = arr.length;   // 8
    double avg;

    for (int i = 0; i < len; i++){      // [5,5,5,8]   [i = 0]  [i = 1]  [i = 2]     [2, 2, 2]         [] 
        currSum += arr[i];            // curSum = 5       5     15   10 + 8 
        curLen++;  // 1                // curLen = 1      2     3
        if (curLen >= k){
          // check average
          avg = currSum / k;          //  avg = 15 / 3 ~ 5     18 / 3 ~ 6
          if (avg > target) {
            res ++;     // 1
          }

          currSum = currSum - arr[(i+1) - k];      index = 2 + 1 - 3 = 0   [2, 2]
        }
    }

    return res;
 }


 
 [1, 1, 1, 1, 1, 2,2,2,2, 2, 2, 2, 2,  ,2 ,2,2,2, 5,5,5,8]  k  leng of sub array   k - 1 < target      
// [2,2,2,2,5,5,5,8]
 public int findAllSubarrayStop(int[] arr, int k, int target){
    if (arr == null || arr.lengh < k || target < 0){
      return 0;
    }

    int currSum = 0;
    int curLen = 0;
    int res = 0;
    int len = arr.length;   // 8
    double avg;

    int stopIndex = 0;

    for (int i = 0; i < len; i++){      // [5,5,5,8]   [i = 0]  [i = 1]  [i = 2]     [2, 2, 2]         [] 
        currSum += arr[i];            // curSum = 5       5     15   10 + 8 
        curLen++;  // 1                // curLen = 1      2     3
        if (curLen >= k){
          // check average
          avg = currSum / k;          //  avg = 15 / 3 ~ 5     18 / 3 ~ 6
          if (avg > target) {
            res ++;     // 1
          }

          currSum = currSum - arr[(i+1) - k];      index = 2 + 1 - 3 = 0   [2, 2]

          if (avg > tagert) {   // rest of array > target  = 4    [5, 5, 5, 8]    [1, 2, 3, 7]  k = 2  t = 3  [3, 7]
            stopIndex = i;     // 3, 4

            return res + len-i;

          }
        }
    }

    if (stopIndex != 0) {
      int lenOfLeftArr = len - stopIndex;   // [5, 5, 5, 8]  k = 2, t = 3      lenOfLeftArr = 4  k = 2
      res += doMath(lenOfLeftArr, k); [5, 5] [5, 5] [5, 8]  ->  lenOfLeftArr - k  + 1
    }
    
    return res;
 }