HashMap VS Hashtable
1. HashMap is non-synchronized. It is not thread-safe and can’t be shared between many threads without proper synchronization code 
whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads.
Based on my experience I use ConcurrentHashMap to handle multiple thread
2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
HashMap is generally preferred over HashTable if thread synchronization is not needed.
3. Hashtable extends dictorary class, hashmap extends abstractMap class

HashMap internally  function
 using two data structures namely an array and a linked list. Whenever you declare a hashmap 
 what is going to happen internally is that it will create an array of buckets. The buckets are referred to as nodes or you can say a linked list. These nodes contain mainly:


Major difference between lock and synchronized:
1. with locks, you can release and acquire the locks in any order.
2. with synchronized, you can release the locks only in the order it was acquired.

If you're simply locking an object, I'd prefer to use synchronized
Example:

Lock.acquire();
doSomethingNifty(); // Throws a NPE!
Lock.release(); // Oh noes, we never release the lock!
You have to explicitly do try{} finally{} everywhere.

Abstract VS Interface
An abstract class is a class that cannot be instantiated and can contain both abstract and non-abstract methods.
An interface, on the other hand, is a contract that specifies a set of methods that a class must implement.
In an abstract class, some methods can be implemented, while others are left abstract,
 meaning that they have no implementation and must be overridden by concrete subclasses. 
In contrast, all methods in an interface are by default abstract and must be implemented by any class that implements the interface.
Inheritance: A class can inherit from only one abstract class, but it can implement multiple interfaces. 
This is because an abstract class represents a type of object, while an interface represents a set of behaviors.

Semaphore in Java
A semaphore controls access to a shared resource through the use of a counter. If the counter is greater than zero, 
then access is allowed. If it is zero, then access is denied. What the counter is \
counting are permits that allow access to the shared resource. Thus, to access the resource, 
a thread must be granted a permit from the semaphore. 

Dependency Injection in Spring
Dependency Injection (DI) is a design pattern that removes the dependency from the programming code so that it 
can be easy to manage and test the application. Dependency Injection makes our programming code loosely coupled.
Two ways to perform Dependency Injection in Spring framework
Spring framework provides two ways to inject dependency
By Constructor
By Setter method
https://zhuanlan.zhihu.com/p/67032669

Spring MVC Framework
A Spring MVC is a Java framework which is used to build web applications. 
It follows the Model-View-Controller design pattern. It implements all the basic features of a 
core spring framework like Inversion of Control, Dependency Injection.

A Spring MVC provides an elegant solution to use MVC in spring framework by the help of DispatcherServlet.
 Here, DispatcherServlet is a class that receives the incoming request and maps it to the right resource 
 such as controllers, models, and views


 HDFS: 
 Hadoop Distributed File System is a distributed file system designed to store and run on multiple machines
  that are connected to each other as nodes and provide data reliability. It consists of clusters, each of which is accessed through 
  a single NameNode software tool installed on a separate machine to monitor and manage the that cluster’s file system and user access mechanism.

HBase: 
HBase is a top-level Apache project written in java which fulfills the need to read and write data in real-time. 
It provides a simple interface to the distributed data. It can be accessed by Apache Hive, Apache Pig, MapReduce, and store information in HDFS.

Hadoop: Hadoop is an open source framework from Apache that is used to store and process large datasets distributed across 
a cluster of servers. Four main components of Hadoop are Hadoop Distributed File System(HDFS), Yarn, MapReduce, and libraries.


User Datagram Protocol (UDP) is a communications protocol for time-sensitive applications like gaming, playing videos
 UDP can also cause data packets to get lost as they go from the source to the destination. 
 It can also make it relatively easy for a hacker to execute a distributed denial-of-service (DDoS) attack.

 TCP is different in that it requires a handshake between where the data originates and where it is headed. 
 This makes TCP more reliable than UDP. In the course of a TCP communication, the data can only be sent along 
 after the destination and source have been formally linked. With UDP, because no link is required, the data can be sent right away.

 Another difference between TCP and UDP communications is that with TCP, the order in which the packets 
 need to be received is confirmed before the transmission begins. Also, 
 TCP provides for the confirmation that the packets arrived as intended. 
 In the event that the packet does not arrive, TCP dictates that it needs to be sent again.
  UDP does not require any confirmation, checking, or resending.

